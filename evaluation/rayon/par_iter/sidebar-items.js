initSidebarItems({"mod":[["chain",""],["collect",""],["collections",""],["enumerate",""],["filter",""],["filter_map",""],["find",""],["flat_map",""],["fold",""],["for_each",""],["from_par_iter",""],["internal","Internal traits and functions used to implement parallel iteration. These should be considered highly unstable: users of parallel iterators should not need to interact with them directly. See `README.md` for a high-level overview."],["len",""],["map",""],["noop",""],["option",""],["range",""],["reduce",""],["skip",""],["slice",""],["slice_mut",""],["string",""],["take",""],["vec",""],["weight",""],["zip",""]],"trait":[["BoundedParallelIterator","A trait for parallel iterators items where the precise number of items is not known, but we can at least give an upper-bound. These sorts of iterators result from filtering."],["ExactParallelIterator","A trait for parallel iterators items where the precise number of items is known. This occurs when e.g. iterating over a vector. Knowing precisely how many items will be produced is very useful."],["IndexedParallelIterator","An iterator that supports \"random access\" to its data, meaning that you can split it at arbitrary indices and draw data from those points."],["IntoParallelIterator",""],["IntoParallelRefIterator",""],["IntoParallelRefMutIterator",""],["ParallelIterator","The `ParallelIterator` interface."],["ParallelString","Parallel extensions for strings."],["ToParallelChunks",""],["ToParallelChunksMut",""]]});