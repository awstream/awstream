initSidebarItems({"fn":[["current","Returns a handle to the current task to call `notify` at a later date."],["init","Initialize the `futures` task system."],["is_in_task","Return whether the caller is running in a task (and so can use task_local!)."],["spawn","Spawns a future or stream, returning it and the new task responsible for running it to completion."],["with_unpark_event","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task."]],"struct":[["AtomicTask","A synchronization primitive for task notification."],["LocalKey","A key for task-local data stored in a future's task."],["Run","Units of work submitted to an `Executor`, currently only created internally."],["Spawn","Representation of a spawned future/stream."],["Task","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion."],["TaskRc","A reference to a piece of data that's accessible only within a specific `Task`."],["UnparkEvent","A set insertion to trigger upon `unpark`."]],"trait":[["EventSet","A concurrent set which allows for the insertion of `usize` values."],["Executor","A trait representing requests to poll futures."],["Unpark","A trait which represents a sink of notifications that a future is ready to make progress."]]});